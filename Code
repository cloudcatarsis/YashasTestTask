package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	_ "github.com/lib/pq"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type User struct {
	ID         int64
	telegramID int64
	Balance    float64
	FirstName  string
	Approved   bool
}
type Card struct {
	ID        int64
	Bin       int64
	Country   string
	Data      string
	CreatedAt time.Time
	IsUsed    bool
	UserID    int64
}

var currentState = 0
var limit = 0
var chosenUserID int64 = 0
var chosenCardID int64 = 0
var country = ""
var binNumber int64
var db *sql.DB

func main() {
	var err error
	db, err = sql.Open("postgres", "user=postgres password=1312 dbname=giftcardsbot sslmode=disable")
	if err != nil {
		log.Fatal(err)
	}
	bot, err := tgbotapi.NewBotAPI("7956957657:AAGO4ha8ONjsAeWbQx8QP4qJj5uJq-qhp08")
	if err != nil {
		log.Panic(err)
	}
	userCommands := tgbotapi.NewSetMyCommands([]tgbotapi.BotCommand{
		{Command: "menu", Description: "Использовать бота"},
		{Command: "balance", Description: "Проверить баланс"}}...)
	adminCommands := tgbotapi.NewSetMyCommands([]tgbotapi.BotCommand{
		{Command: "menu", Description: "Использовать бота"},
		{Command: "balance", Description: "Проверить баланс"},
		{Command: "admin", Description: "Административная панель"}}...)
	bot.Request(userCommands)
	bot.Request(adminCommands)

	bot.Debug = true

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			if update.Message.IsCommand() {
				handleCommands(bot, update.Message)
			} else {
				handleTextMessages(bot, update.Message)
			}
		} else if update.CallbackQuery != nil {
			handleCallbacks(bot, update.CallbackQuery)
		}
	}
}

func handleCommands(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {

	chatID := msg.Chat.ID
	userID := msg.From.ID
	user := getUserFromSql(userID)
	switch msg.Command() {
	case "start":
		if !user.Approved {
			welcomeMsg := fmt.Sprintf("Привет, %s! Меня зовут GiftCardBot. Я умею покупать Gift Cards по серийному номеру или по стране, показывать актуальные карты на аккаунте и показать текущий баланс или задолженность.", user.FirstName)
			msg := tgbotapi.NewMessage(chatID, welcomeMsg)
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("Использовать GiftCardBot", "request_use")))
			bot.Send(msg)
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, "Ваш доступ к боту уже одобрен. Вы можете использовать бота."))
			MainMenu(bot, chatID)
		}
	case "balance":
		if user.Approved {
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Ваш баланс: %.2f", user.Balance)))
		}
	case "menu":
		if user.Approved {
			MainMenu(bot, chatID)
		}
	case "admin":
		if userID == 6842250292 || userID == 426400427 {
			adminPanel(bot, chatID)
		}
	}
}

func handleCallbacks(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	user := getUserFromSql(query.From.ID)
	if strings.HasPrefix(query.Data, "choose_user_") {
		chosenUserID, _ = strconv.ParseInt(strings.TrimPrefix(query.Data, "choose_user_"), 10, 64)
		query.Data = "choose_user"
	}
	if strings.HasPrefix(query.Data, "choose_card") {
		chosenCardID, _ = strconv.ParseInt(strings.TrimPrefix(query.Data, "choose_card_"), 10, 64)
		query.Data = "choose_card"
	}
	if strings.HasPrefix(query.Data, "	user_id") {
		chosenUserID, _ = strconv.ParseInt(strings.TrimPrefix(query.Data, "	user_id_"), 10, 64)
		query.Data = "	user_id"
	}

	switch query.Data {
	case "request_use":
		if !user.Approved {
			requestAdminApproval(bot, chatID, query.From.ID)
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, "Ваш доступ к боту уже одобрен. Вы можете использовать бота."))
		}
	case "approve_user":
		db.Exec("UPDATE public.user SET approved = true WHERE id = $1", userID)
		bot.Send(tgbotapi.NewMessage(chatID, "Ваш доступ к боту одобрен!"))
		MainMenu(bot, chatID)
	case "deny_user":
		bot.Send(tgbotapi.NewMessage(chatID, "Ваш доступ к боту отклонен"))
	case "check_balance":
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Ваш баланс: %.2f", user.Balance)))
	case "list_of_users_cards":
		rows, err := db.Query("SELECT id, bin, country, data, created_at, is_used, telegram_id FROM public.card WHERE telegram_id = $1 AND is_used = True", user.ID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, err.Error()))
			return
		}
		defer rows.Close()

		var cards []Card
		for rows.Next() {
			var card Card
			rows.Scan(&card.ID, &card.Bin, &card.Country, &card.Data, &card.CreatedAt, &card.IsUsed, &card.UserID)
			cards = append(cards, card)
		}

		if len(cards) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "У вас нет карт."))
		} else {
			file, _ := os.Create("purchased_cards.txt")
			for _, card := range cards {
				file.WriteString(fmt.Sprintf("Card Number: %s \n", card.Data))
			}
			bot.Send(tgbotapi.NewDocument(chatID, tgbotapi.FilePath("purchased_cards.txt")))
		}
	case "buy_by_number":
		msg := tgbotapi.NewMessage(chatID, "Введите номер подарочных карт (6 цифр):")
		bot.Send(msg)
		currentState = 1
	case "buy_by_country":
		msg := tgbotapi.NewMessage(chatID, "Введите страну подарочных карт (RU | US | CA):")
		bot.Send(msg)
		currentState = 2
	case "moderate_users":
		users := getAllUsersFrimSQL(bot, chatID)
		var buttons [][]tgbotapi.InlineKeyboardButton
		for _, user := range users {
			userButton := tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("Name: %s, Balance: %.2f", user.FirstName, user.Balance), fmt.Sprintf("choose_user_%d", user.telegramID))
			buttons = append(buttons, []tgbotapi.InlineKeyboardButton{userButton})
		}

		keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
		msg := tgbotapi.NewMessage(chatID, "Все пользователи:")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	case "get_stats":
		users := getAllUsersFrimSQL(bot, chatID)
		var messageText string
		for _, user := range users {
			messageText += fmt.Sprintf("%s(%d) Balance: %.2f\n\n", user.FirstName, user.telegramID, user.Balance)
		}
		bot.Send(tgbotapi.NewMessage(chatID, messageText))
	case "choose_user":
		selectedUser := getUserFromSql(chosenUserID)
		keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("+1000", "add_1000"),
			tgbotapi.NewInlineKeyboardButtonData("-1000", "sub_1000"),
			tgbotapi.NewInlineKeyboardButtonData("reset", "reset_balance"),
		))
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("Выберете действие для пользователя %s (Balance: %.2f)", selectedUser.FirstName, selectedUser.Balance))
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	case "add_1000":
		changeBalance(bot, chatID, 1000., chosenUserID)
	case "sub_1000":
		changeBalance(bot, chatID, -1000., chosenUserID)
	case "reset_balance":
		changeBalance(bot, chatID, user.Balance, chosenUserID)
	case "list_cards":
		cards, err := getAllCards()
		if err != nil {
			log.Printf("Error getting all cards: %v", err)
			bot.Send(tgbotapi.NewMessage(chatID, "Произошла ошибка при получении списка карт."))
			return
		}
		users := getAllUsersFrimSQL(bot, chatID)
		var messageText string
		for _, card := range cards {
			for _, user := range users {
				if user.ID == card.UserID {
					messageText += fmt.Sprintf("ID: %d, BIN: %d, Country: %s, Is Used: %v, User: %s\n Data: %s\n",
						card.ID, card.Bin, card.Country, card.IsUsed, user.FirstName, card.Data)
				}
			}
		}
		if messageText == "" {
			messageText = "Карт нет в базе данных."
		}
		bot.Send(tgbotapi.NewMessage(chatID, messageText))
	case "update_card_status":
		cards, err := getAllCards()
		if err != nil {
			log.Printf("Error getting all cards: %v", err)
			bot.Send(tgbotapi.NewMessage(chatID, "Произошла ошибка при получении списка карт."))
			return
		}
		users := getAllUsersFrimSQL(bot, chatID)
		var buttons [][]tgbotapi.InlineKeyboardButton
		for _, card := range cards {
			for _, user := range users {
				if user.ID == card.UserID {
					cardButton := tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("ID: %d, User: %s, Is Used: %v \nData: %s\n", card.ID, user.FirstName, card.IsUsed, card.Data), fmt.Sprintf("choose_card_%d", card.ID))
					buttons = append(buttons, []tgbotapi.InlineKeyboardButton{cardButton})
				}

			}
		}

		keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
		msg := tgbotapi.NewMessage(chatID, "Все пользователи:")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	case "choose_card":
		selectedCard := getCardFromSql(chosenCardID)
		var user User
		db.QueryRow("SELECT id, telegram_id, first_name, balance, approved FROM public.user WHERE id = $1", selectedCard.UserID).Scan(&user.ID, &user.telegramID, &user.FirstName, &user.Balance, &user.Approved)

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("Поменять номер", "change_bin"),
				tgbotapi.NewInlineKeyboardButtonData("Поменять страну", "change_country")),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("Поменять владельца", "change_telegram_id"),
				tgbotapi.NewInlineKeyboardButtonData("Поменять Data", "change_data")),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("Удалить карту", "delete_card"),
			))
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("Выберете действие для карты:\nID: %d, Bin: %d, Country: %s, User: %s \nData: %s", selectedCard.ID, selectedCard.Bin, selectedCard.Country, user.FirstName, selectedCard.Data))
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	case "change_bin":
		msg := tgbotapi.NewMessage(chatID, "Введите новый BIN (6 цифр):")
		bot.Send(msg)
		currentState = 5
	case "change_country":
		msg := tgbotapi.NewMessage(chatID, "Введите новую страну (US|RU|CA):")
		bot.Send(msg)
		currentState = 6
	case "change_telegram_id":
		users := getAllUsersFrimSQL(bot, chatID)
		var buttons [][]tgbotapi.InlineKeyboardButton
		for _, user := range users {
			userButton := tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("Name: %s", user.FirstName), fmt.Sprintf("user_id_%d", user.ID))
			buttons = append(buttons, []tgbotapi.InlineKeyboardButton{userButton})
		}
		keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
		msg := tgbotapi.NewMessage(chatID, "Выбирете нового пользователя")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	case "user_id":
		db.Exec("UPDATE public.card SET telegram_id = $1, is_used = false WHERE id = $2", chosenUserID, chosenCardID)
		bot.Send(tgbotapi.NewMessage(chatID, "Пользователь обновлён на "))
	case "change_data":
		msg := tgbotapi.NewMessage(chatID, "Введите новую data :")
		bot.Send(msg)
		currentState = 7
	case "delete_card":
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("Удалить", "delete_card_forever"),
				tgbotapi.NewInlineKeyboardButtonData("Обратно", "update_card_status")),
		)
		msg := tgbotapi.NewMessage(chatID, "Точно хотите удалить?")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	case "delete_card_forever":
		db.Exec("DELETE FROM public.card WHERE id = $1", chosenCardID)
	case "add_new_card":
		msg := tgbotapi.NewMessage(chatID, "Введите данные карты в формате: BIN|Country|Data (например, 123456|US|SomeData):")
		bot.Send(msg)
		currentState = 8
	}
}
func handleTextMessages(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	input := msg.Text
	userID := msg.From.ID
	user := getUserFromSql(userID)
	switch currentState {
	case 1: // Buy GF by number
		binNumber, _ = strconv.ParseInt(input, 10, 64)
		if len(input) != 6 {
			bot.Send(tgbotapi.NewMessage(chatID, "Номер должен состоять из 6 цифр. Пожалуйста, введите ещё раз."))
			return
		}
		query := "SELECT id, bin, country, data, created_at, is_used, telegram_id FROM public.card WHERE bin = $1 AND is_used = false"
		rows, err := db.Query(query, binNumber)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "Error getting cards by number"))
			return
		}
		defer rows.Close()

		var cards []Card
		for rows.Next() {
			var card Card
			rows.Scan(&card.ID, &card.Bin, &card.Country, &card.Data, &card.CreatedAt, &card.IsUsed, &card.UserID)
			cards = append(cards, card)
			limit++
		}

		if len(cards) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "Совпадений нет. Пожалуйста, введите номер ещё раз."))
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Доступно %d gift cards с номером (%d). Сколько gift cards вы желаете приобрести?", len(cards), binNumber)))
			currentState = 3
		}
	case 2: // Buy GF by coutry
		country = input
		if len(country) != 2 {
			bot.Send(tgbotapi.NewMessage(chatID, "Страна должна быть указана двумя буквами. Пожалуйста, введите ещё раз."))
			return
		}
		rows, err := db.Query("SELECT id, bin, country, data, created_at, is_used, telegram_id FROM public.card WHERE country = $1 AND is_used = false", country)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "Ошибка cards by country"))
			return
		}
		defer rows.Close()

		var cards []Card
		for rows.Next() {
			var card Card
			rows.Scan(&card.ID, &card.Bin, &card.Country, &card.Data, &card.CreatedAt, &card.IsUsed, &card.UserID)
			cards = append(cards, card)
			limit++
		}

		if len(cards) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "Совпадений нет. Пожалуйста, введите страну ещё раз."))
			return
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Доступно %d gift cards со страной (%s). Сколько gift cards вы желаете приобрести?", len(cards), input)))
			currentState = 4
		}
	case 3:
		numberOfCards, err := strconv.Atoi(input)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "Пожалуйста, введите корректное количество карт (должно быть целым числом)."))
			return
		}
		if numberOfCards <= 0 || numberOfCards > limit {
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Пожалуйста, введите количество карт от 1 до %d", limit)))
			return
		}
		if user.Balance < float64(numberOfCards)-5000 {
			bot.Send(tgbotapi.NewMessage(chatID, "Недостаточно средств на балансе (Задолженность больше $5000)"))
			return
		}

		rows, err := db.Query("SELECT id, bin, country, data, created_at, is_used, telegram_id FROM public.card WHERE bin = $1 AND is_used = false", binNumber)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "Error getting cards by country"))
			return
		}
		defer rows.Close()

		var cards []Card
		var count = 0
		for rows.Next() && count < numberOfCards {
			var card Card
			rows.Scan(&card.ID, &card.Bin, &card.Country, &card.Data, &card.CreatedAt, &card.IsUsed, &card.UserID)
			cards = append(cards, card)
			count++
		}
		file, _ := os.Create("purchased_cards.txt")
		for _, card := range cards {
			file.WriteString(fmt.Sprintf("Card Number: %s \n", card.Data))
			_, err := db.Exec("UPDATE public.card SET telegram_id = $1, is_used = true WHERE id = $2", user.ID, card.ID)
			if err != nil {
				log.Printf("Error updating card: %v", err)
				// Решите, что делать в случае ошибки, например, прервать выполнение или продолжить с следующей картой
			}
		}
		newBalance := user.Balance - float64(numberOfCards)
		db.Exec("UPDATE public.user SET balance = $1 WHERE telegram_id = $2", newBalance, userID)

		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Вы купили %d карт. Новый баланс: %.2f\n ", binNumber, newBalance)))
		bot.Send(tgbotapi.NewDocument(chatID, tgbotapi.FilePath("purchased_cards.txt")))
		limit = 0
		binNumber = 0
	case 4:
		numberOfCards, err := strconv.Atoi(input)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "Пожалуйста, введите корректное количество карт (должно быть целым числом)."))
			return
		}

		if numberOfCards <= 0 || numberOfCards > limit {
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Пожалуйста, введите количество карт от 1 до %d", limit)))
			return
		}
		if user.Balance < float64(numberOfCards)-5000 {
			bot.Send(tgbotapi.NewMessage(chatID, "Недостаточно средств на балансе (Задолженность больше $5000)"))
			return
		}

		rows, err := db.Query("SELECT id, bin, country, data, created_at, is_used, telegram_id FROM public.card WHERE country = $1 AND is_used = false", country)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "Error getting cards by country"))
			return
		}
		defer rows.Close()

		var cards []Card
		var count = 0
		for rows.Next() && count < numberOfCards {
			var card Card
			rows.Scan(&card.ID, &card.Bin, &card.Country, &card.Data, &card.CreatedAt, &card.IsUsed, &card.UserID)
			cards = append(cards, card)
			count++
		}
		file, _ := os.Create("purchased_cards.txt")
		for _, card := range cards {
			file.WriteString(fmt.Sprintf("Card Number: %s \n", card.Data))
			_, err := db.Exec("UPDATE public.card SET telegram_id = $1, is_used = true WHERE id = $2", user.ID, card.ID)
			if err != nil {
				log.Printf("Error updating card: %v", err)
				// Решите, что делать в случае ошибки, например, прервать выполнение или продолжить с следующей картой
			}
		}
		newBalance := user.Balance - float64(numberOfCards)
		db.Exec("UPDATE public.user SET balance = $1 WHERE telegram_id = $2", newBalance, userID)
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Вы купили %d карт. Новый баланс: %.2f\n ", numberOfCards, newBalance)))
		bot.Send(tgbotapi.NewDocument(chatID, tgbotapi.FilePath("purchased_cards.txt")))
		limit = 0
		country = ""
	case 5:
		binNumber, _ = strconv.ParseInt(input, 10, 64)
		if len(input) != 6 {
			bot.Send(tgbotapi.NewMessage(chatID, "Номер должен состоять из 6 цифр. Пожалуйста, введите ещё раз."))
			return
		}
		db.Exec("UPDATE public.card SET bin = $1 WHERE id = $2", binNumber, chosenCardID)
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Номер bin обновлён на %d", binNumber)))
	case 6:
		country = input
		if len(input) != 2 {
			bot.Send(tgbotapi.NewMessage(chatID, "Введите название страны двумя буквами ( RU )."))
			return
		}
		db.Exec("UPDATE public.card SET country = $1 WHERE id = $2", country, chosenCardID)
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Страна обновлена на %s", country)))
	case 7:
		data := input
		db.Exec("UPDATE public.card SET data = $1 WHERE id = $2", data, chosenCardID)
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Data обновлена на %s", input)))
		currentState = 0
	case 8:
		buyCard(bot, chatID, input)
	default:
		bot.Send(tgbotapi.NewMessage(chatID, "Я не умею свободно читать сообщения, нажми на одну из кнопок и я смогу тебя понять ;)"))
		MainMenu(bot, chatID)
	}
}
func adminPanel(bot *tgbotapi.BotAPI, chatID int64) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Все пользователи", "get_stats"),
			tgbotapi.NewInlineKeyboardButtonData("Модерация задолженностей", "moderate_users")),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Все карты", "list_cards"),
			tgbotapi.NewInlineKeyboardButtonData("Модерация статусов карт", "update_card_status")),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Добавить новую карту", "add_new_card")))
	msg := tgbotapi.NewMessage(chatID, "Панель модератора!")
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}
func MainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Мои подарочные карты", "list_of_users_cards"),
			tgbotapi.NewInlineKeyboardButtonData("Мой баланс", "check_balance")),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Покупка карт по номеру карты", "buy_by_number"),
			tgbotapi.NewInlineKeyboardButtonData("Покупка карт по стране", "buy_by_country")))
	msg := tgbotapi.NewMessage(chatID, "Функции бота:")
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}
func getUserFromSql(telegramID int64) User {
	var user User
	db.QueryRow("SELECT id, telegram_id, first_name, balance, approved FROM public.user WHERE telegram_id = $1", telegramID).Scan(&user.ID, &user.telegramID, &user.FirstName, &user.Balance, &user.Approved)
	return user
}
func getAllUsersFrimSQL(bot *tgbotapi.BotAPI, chatID int64) []User {
	rows, err := db.Query("SELECT id, telegram_id, first_name, balance, approved FROM public.user")
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "Произошла ошибка при получении списка пользователей."))
	}
	defer rows.Close()

	var users []User
	for rows.Next() {
		var user User
		rows.Scan(&user.ID, &user.telegramID, &user.FirstName, &user.Balance, &user.Approved)
		users = append(users, user)
	}
	return users
}
func changeBalance(bot *tgbotapi.BotAPI, chatID int64, amount float64, chosenUserID int64) {
	user := getUserFromSql(chosenUserID)
	if user.telegramID == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "Пользователь не найден."))
		return
	}
	newBalance := user.Balance + amount
	db.Exec("UPDATE public.user SET balance = $1 WHERE telegram_id = $2", newBalance, chosenUserID)
	bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Баланс %s изменен на %.2f", user.FirstName, newBalance)))

}
func requestAdminApproval(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	adminID := int64(6842250292)
	user := getUserFromSql(userID)
	adminMsg := tgbotapi.NewMessage(adminID, fmt.Sprintf("Пользователь %s (ID: %d) хочет использовать бота. Разрешить?", user.FirstName, userID))
	approvalKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Разрешить", "approve_user"),
			tgbotapi.NewInlineKeyboardButtonData("Отклонить", "deny_user")))
	adminMsg.ReplyMarkup = approvalKeyboard
	bot.Send(adminMsg)

	userMsg := tgbotapi.NewMessage(chatID, "Ваш запрос на использование бота отправлен администратору. Ожидайте ответа.")
	bot.Send(userMsg)
}
func getAllCards() ([]Card, error) {
	rows, err := db.Query("SELECT id, bin, country, data, created_at, is_used, telegram_id FROM public.card")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var cards []Card
	for rows.Next() {
		var card Card
		if err := rows.Scan(&card.ID, &card.Bin, &card.Country, &card.Data, &card.CreatedAt, &card.IsUsed, &card.UserID); err != nil {
			return nil, err
		}
		cards = append(cards, card)
	}
	return cards, nil
}
func getCardFromSql(cardID int64) Card {
	var card Card
	db.QueryRow("SELECT id, bin, country, data, created_at, is_used, telegram_id FROM public.card WHERE id = $1", cardID).Scan(&card.ID, &card.Bin, &card.Country, &card.Data, &card.CreatedAt, &card.IsUsed, &card.UserID)
	return card
}
func buyCard(bot *tgbotapi.BotAPI, chatID int64, input string) {
	parts := strings.Split(input, "|")
	if len(parts) != 3 {
		bot.Send(tgbotapi.NewMessage(chatID, "Неверный формат ввода. Введите данные в формате: BIN|Country|Data"))
		return
	}

	bin, err := strconv.Atoi(parts[0])
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "BIN должен быть числом. Попробуйте снова."))
		return
	}

	country := parts[1]
	data := parts[2]
	cardID, err := addCardToSQL(bin, country, data)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "Error adding new card"))
		log.Printf("Error adding new card"+": %v", err)
		return
	}
	bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("Новая карта добавлена. ID: %d", cardID)))
	currentState = 0
}
func addCardToSQL(bin int, country string, data string) (int64, error) {
	var cardID int64
	err := db.QueryRow("INSERT INTO public.card (bin, country, data, telegram_id) VALUES ($1, $2, $3, 1) RETURNING id", bin, country, data).Scan(&cardID)
	return cardID, err
}
